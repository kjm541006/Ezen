package com.jumin.springbootProject.controller;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.jumin.springbootProject.dto.MemberDTO;
import com.jumin.springbootProject.service.MemberService;
import com.jumin.springbootProject.service.MemberService.LoginResult;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class MemberController {
	// 생성자 주입
	private final MemberService memberService;

	@GetMapping("/member/join")
	public String joinForm() {
		return "join";
	}
	
	@PostMapping("/member/join")
	public String join( @ModelAttribute MemberDTO memberDTO, Model model) {
		String joinResult = memberService.save(memberDTO);
		if(joinResult == "fail") {
			System.out.println("회원가입 에러");
			model.addAttribute("error", "이미 존재하는 이메일입니다.");
			return "join";
		}else {
			System.out.println("MemberController.save");
			System.out.println(memberDTO);
			memberService.save(memberDTO);
			return "joinSuccess";
		}
	}
	
	@GetMapping("/member/login")
	public String loginForm() {
		return "login";
	}
	
	@PostMapping("/member/login")
	public String login(@ModelAttribute MemberDTO memberDTO, HttpSession session, Model model) {
	    LoginResult loginResult = memberService.login(memberDTO);
	    if(loginResult == LoginResult.SUCCESS) {
	        session.setAttribute("loginId", memberDTO.getName());
	        return "redirect:/?loginId=" + memberDTO.getEmail();
		} else if(loginResult == LoginResult.EMAIL_NOT_FOUND) {
			model.addAttribute("error", "존재하지 않는 이메일입니다.");
			return "login";
		} else if(loginResult == LoginResult.INVALID_PASSWORD) {
			model.addAttribute("error", "비밀번호가 일치하지 않습니다.");
			return "login";
		} else {
			return "login";
		}
	}
	
	@GetMapping("/member/logout")
	public String logout(HttpSession session) {
	    session.invalidate(); // 세션 무효화
	    return "redirect:/";
	}
	
	@GetMapping("/member/delete")
	public String deleteForm() {
		return "delete";
	}

	@PostMapping("/member/delete")
	public String deleteMember(@RequestParam("email") String email, @RequestParam("password") String password, HttpSession session, Model model) {
	    String loginId = (String) session.getAttribute("loginId");
	    
	    // 로그인한 유저의 이메일과 입력한 이메일이 일치하는지 확인
	    if (loginId != null && loginId.equals(email)) {
	        // memberService의 deleteMember 메소드를 호출하여 회원 삭제 수행
	        boolean isDeleted = memberService.delete(email, password);
	        if (isDeleted) {
	            session.invalidate(); // 세션 무효화
	            return "redirect:/main?delay=3"; // 회원 삭제 성공 시 메인 페이지로 이동
	        } else {
	            model.addAttribute("error", "비밀번호가 잘못되었습니다.");
	        }
	    } else {
	        model.addAttribute("error", "로그인한 유저의 이메일과 일치하지 않습니다.");
	    }
	    
	    return "delete"; // 회원 삭제 실패 시 삭제 페이지로 이동
	}

	
}
